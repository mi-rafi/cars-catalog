// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/mi-raf/cars-catalog/internal/api"
	"github.com/mi-raf/cars-catalog/internal/database"
	"github.com/mi-raf/cars-catalog/internal/service"
	"github.com/mi-raf/cars-catalog/internal/swagger"
)

import (
	_ "github.com/golang-migrate/migrate/v4/database/postgres"
	_ "github.com/golang-migrate/migrate/v4/source/file"
	_ "github.com/joho/godotenv/autoload"
)

// Injectors from wire.go:

func initApp(ctx context.Context, cfg *config) (*api.API, func(), error) {
	apiConfig := initApiConfig(cfg)
	pool, cleanup, err := initPostgresConnection(ctx, cfg)
	if err != nil {
		return nil, nil, err
	}
	pgCarRepository, err := database.NewCarRepository(ctx, pool)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	configuration := initHttpClientConfiguration(cfg)
	apiClient := swagger.NewAPIClient(configuration)
	validate := initValidator()
	carServise := service.NewCarService(pgCarRepository, apiClient, validate)
	apiAPI, err := api.New(ctx, apiConfig, carServise)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	return apiAPI, func() {
		cleanup()
	}, nil
}
